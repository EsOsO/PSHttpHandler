using System;
using System.IO;
using System.Management.Automation;
using System.Management.Automation.Runspaces;
using System.Text;
using System.Web;
using System.Web.SessionState;
using Powershell = System.Management.Automation.PowerShell;


class PowershellHandler : IHttpHandler, IRequiresSessionState
{
    public bool IsReusable
    {
        get { return false; }
    }

    public void ProcessRequest(HttpContext context)
    {
        Runspace rs;
        if (context.Session["Runspace"] == null)
        {
            rs = RunspaceFactory.CreateRunspace();
            rs.Open();
            context.Session["Runspace"] = rs;
        }

        rs = context.Session["Runspace"] as Runspace;
        rs.SessionStateProxy.SetVariable("HttpContext", context);

        String script = String.Empty;
        using (StreamReader streamReader = new StreamReader(context.Request.PhysicalPath, Encoding.UTF8))
        {
            script = streamReader.ReadToEnd();
        }

        using (Powershell ps = Powershell.Create())
        {
            ps.Runspace = rs;
            ps.AddScript(script);
            try
            {
                foreach (PSObject result in ps.Invoke())
                {
                    context.Response.Write(result);
                }

                PSDataCollection<ErrorRecord> errors = ps.Streams.Error;
                if (errors != null && errors.Count > 0)
                {
                    foreach (ErrorRecord err in errors)
                    {
                        context.Response.Write(String.Format("  error: {0}", err.ToString()));
                    }
                }
            }
            catch (RuntimeException runtimeException)
            {
                // Trap any exception generated by the commands. These exceptions
                // will all be derived from the RuntimeException exception.
                context.Response.Write(String.Format("Runtime exception: {0}: {1}\n{2}",
                    runtimeException.ErrorRecord.InvocationInfo.InvocationName,
                    runtimeException.Message,
                    runtimeException.ErrorRecord.InvocationInfo.PositionMessage));
            }
            ps.Dispose();
        }
    }
}